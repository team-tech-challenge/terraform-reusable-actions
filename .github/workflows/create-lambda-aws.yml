name: 'Terraform Deploy'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: "Environment to deploy"
      tf_plan_extra_args:
        required: false
        type: string
        default: ""
    secrets:
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: "AWS Secret Access Key"
      AWS_ACCESS_KEY_ID:
        required: true
        description: "AWS Access Key ID"
      AWS_REGION:
        required: true
        description: "AWS Region"
      AWS_SESSION_TOKEN:
        required: true
        description: "AWS Session Token"
      ECR_REPOSITORY:
        required: true
        description: "AWS ECR Repository Name"
      WORKING_DIRECTORY:
        required: true
        description: "Working Directory for Terraform"
      TF_BACKEND_KEY:
        required: true
        description: "Terraform Backend Key"
      TF_BACKEND_REGION:
        required: true
        description: "Terraform Backend Region"
      TF_BACKEND_BUCKET:
        required: true
        description: "Terraform Backend Bucket"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v3
        with:
          name: image-name
          path: .
        continue-on-error: true

      - name: Read image name
        id: read-image
        run: |
          if [[ -f image_name.txt ]]; then
            IMAGE_NAME=$(cat image_name.txt)
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
            echo "IMAGE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "IMAGE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws_account_id
        run: echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Set the Lambda Image URI
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          AWS_ACCOUNT_ID: ${{ env.account_id }}
        run: |
          echo "LAMBDA_IMAGE_URI=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "Lambda Image URI set to ${IMAGE_NAME}"

      - name: Initialize Terraform for Deploy
        env:
          TF_VAR_workspace_environment: ${{ inputs.environment }}
          LAMBDA_IMAGE_URI: ${{ env.LAMBDA_IMAGE_URI }}
        run: |
          terraform init -upgrade -backend-config="bucket=${{ secrets.TF_BACKEND_BUCKET }}" -backend-config="key=${{ secrets.TF_BACKEND_KEY }}" -backend-config="region=${{ secrets.TF_BACKEND_REGION }}"
        working-directory: ${{ secrets.WORKING_DIRECTORY }}

      - name: Terraform Refresh for Deploy
        env:
          TF_VAR_workspace_environment: ${{ inputs.environment }}
          LAMBDA_IMAGE_URI: ${{ env.LAMBDA_IMAGE_URI }}
        run: |
          terraform refresh -var="lambda_image_uri=${{ env.LAMBDA_IMAGE_URI }}"
        working-directory: ${{ secrets.WORKING_DIRECTORY }}

      - name: Terraform Plan for Deploy
        env:
          TF_VAR_workspace_environment: ${{ inputs.environment }}
          LAMBDA_IMAGE_URI: ${{ env.LAMBDA_IMAGE_URI }}
        run: |
          terraform plan -out=tfplan-${{ inputs.environment }} -var="lambda_image_uri=${{ env.LAMBDA_IMAGE_URI }}"  ${{ inputs.tf_plan_extra_args }}
        working-directory: ${{ secrets.WORKING_DIRECTORY }}

      - name: Terraform Validate for Deploy
        run: terraform validate
        working-directory: ${{ secrets.WORKING_DIRECTORY }}

      - name: Terraform Apply for Deploy
        run: terraform apply -auto-approve tfplan-${{ inputs.environment }}
        working-directory: ${{ secrets.WORKING_DIRECTORY }}